#!/usr/bin/env ts-node

// Load environment variables from .env file
import 'dotenv/config'

import * as fs from 'fs'
import * as path from 'path'
import * as os from 'os'

async function main() {
  console.log('🪿 Beam Goose Profile Setup')
  console.log('===========================')

  // Get the absolute path to the dist/mcp/server.js
  const repoRoot = process.cwd()
  const mcpServerPath = path.join(repoRoot, 'dist', 'mcp', 'server.js')
  
  console.log(`📁 Repository root: ${repoRoot}`)
  console.log(`🎯 MCP server path: ${mcpServerPath}`)

  // Check if the MCP server exists
  if (!fs.existsSync(mcpServerPath)) {
    console.error('')
    console.error('❌ MCP server not found at:', mcpServerPath)
    console.error('💡 Run "npm run build" first to compile TypeScript to dist/')
    process.exit(1)
  }

  // Goose config directory
  const gooseConfigDir = path.join(os.homedir(), '.config', 'goose')
  const profilesPath = path.join(gooseConfigDir, 'profiles.yaml')

  // Create config directory if it doesn't exist
  if (!fs.existsSync(gooseConfigDir)) {
    console.log(`📁 Creating Goose config directory: ${gooseConfigDir}`)
    fs.mkdirSync(gooseConfigDir, { recursive: true })
  }

  // Generate the profiles.yaml content
  const profilesYaml = `# Beam MCP Integration for Goose
# Generated by: npm run goose:profile

default:
  providers:
    - type: mcp
      server_command: ["node", "${mcpServerPath}"]

# Alternative profile for development
beam-dev:
  providers:
    - type: mcp
      server_command: ["node", "${mcpServerPath}"]
`

  // Write the profiles.yaml file
  console.log(`📝 Writing Goose profiles configuration...`)
  fs.writeFileSync(profilesPath, profilesYaml, 'utf8')

  console.log('')
  console.log('✅ Goose profile configuration complete!')
  console.log('')
  console.log('📋 Next steps:')
  console.log('   1. Install Goose: https://github.com/square/goose')
  console.log('   2. Run: goose session start')
  console.log('   3. Ask: "Find snowboards under $900 from beam-devtest.myshopify.com"')
  console.log('')
  console.log(`📂 Config written to: ${profilesPath}`)
  console.log('')
  console.log('🧪 Test the MCP server with:')
  console.log('   npm run mcp:smoke -- snowboard')
  console.log('   npm run mcp:smoke -- --details <product_id>')
}

// Run the script if called directly
if (require.main === module) {
  main().catch(error => {
    console.error('💥 Setup failed:', error)
    process.exit(1)
  })
} 