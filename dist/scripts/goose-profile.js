#!/usr/bin/env ts-node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
require("dotenv/config");
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const os = __importStar(require("os"));
async function main() {
    console.log('🪿 Beam Goose Profile Setup');
    console.log('===========================');
    const repoRoot = process.cwd();
    const mcpServerPath = path.join(repoRoot, 'dist', 'mcp', 'server.js');
    console.log(`📁 Repository root: ${repoRoot}`);
    console.log(`🎯 MCP server path: ${mcpServerPath}`);
    if (!fs.existsSync(mcpServerPath)) {
        console.error('');
        console.error('❌ MCP server not found at:', mcpServerPath);
        console.error('💡 Run "npm run build" first to compile TypeScript to dist/');
        process.exit(1);
    }
    const gooseConfigDir = path.join(os.homedir(), '.config', 'goose');
    const profilesPath = path.join(gooseConfigDir, 'profiles.yaml');
    if (!fs.existsSync(gooseConfigDir)) {
        console.log(`📁 Creating Goose config directory: ${gooseConfigDir}`);
        fs.mkdirSync(gooseConfigDir, { recursive: true });
    }
    const profilesYaml = `# Beam MCP Integration for Goose
# Generated by: npm run goose:profile

default:
  providers:
    - type: mcp
      server_command: ["node", "${mcpServerPath}"]

# Alternative profile for development
beam-dev:
  providers:
    - type: mcp
      server_command: ["node", "${mcpServerPath}"]
`;
    console.log(`📝 Writing Goose profiles configuration...`);
    fs.writeFileSync(profilesPath, profilesYaml, 'utf8');
    console.log('');
    console.log('✅ Goose profile configuration complete!');
    console.log('');
    console.log('📋 Next steps:');
    console.log('   1. Install Goose: https://github.com/square/goose');
    console.log('   2. Run: goose session start');
    console.log('   3. Ask: "Find snowboards under $900 from beam-devtest.myshopify.com"');
    console.log('');
    console.log(`📂 Config written to: ${profilesPath}`);
    console.log('');
    console.log('🧪 Test the MCP server with:');
    console.log('   npm run mcp:smoke -- snowboard');
    console.log('   npm run mcp:smoke -- --details <product_id>');
}
if (require.main === module) {
    main().catch(error => {
        console.error('💥 Setup failed:', error);
        process.exit(1);
    });
}
